{"version":3,"sources":["iitg1.jpg","lionel-messi.jpg","ronaldo.jpeg","Components/login.js","Components/logout.js","Components/admin.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Content","styled","div","Button","button","Heading","p","Login","props","state","username","password","loggedIn","onChange","bind","submitForm","e","this","setState","target","name","value","preventDefault","localStorage","setItem","alert","to","onSubmit","type","placeholder","Component","Logout","removeItem","Wrapper","Image","img","Admin","getItem","src","iitg","messi","cr7","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.329a59be.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/iitg1.ed68be50.jpg\";","module.exports = __webpack_public_path__ + \"static/media/lionel-messi.ac4e7772.jpg\";","module.exports = __webpack_public_path__ + \"static/media/ronaldo.0610db91.jpeg\";","import React, { Component } from 'react';\r\nimport { Redirect } from 'react-router-dom'\r\nimport styled from \"styled-components\";\r\n\r\n\r\nconst Content = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n\r\n`;\r\n\r\n\r\nconst Button = styled.button`\r\n  margin: 20px;\r\n  color: red;\r\n  margin-left: 50px;\r\n`;\r\n\r\nconst Heading = styled.p`\r\n  color: red;\r\n\r\n`;\r\n\r\n\r\n\r\n\r\n\r\nexport default class Login extends Component{\r\n  \r\n   constructor(props){\r\n    super(props)\r\n    \r\n    let loggedIn=false \r\n    this.state={\r\n\r\n      username: '',\r\n      password: '',\r\n      loggedIn\r\n\r\n\r\n   }\r\n\r\n     this.onChange = this.onChange.bind(this)\r\n     this.submitForm = this.submitForm.bind(this)\r\n   }\r\n\r\n   onChange(e){\r\n   \tthis.setState({\r\n   \t\t[e.target.name]: e.target.value\r\n   \t})\r\n   }\r\n\r\n    submitForm(e){\r\n    \te.preventDefault()\r\n    \tconst{ username, password } =this.state\r\n    \t\r\n      //login condition\r\n\r\n    \tif(username === \"Ashish\" && password === \"react\" ){\r\n\r\n            localStorage.setItem(\"token\", \"sdfebfeubfuabfsakjbfasbf\")\r\n    \t\tthis.setState({\r\n    \t\t\tloggedIn: true\r\n    \t\t})\r\n    \t}\r\n      else if(username===\"\" && password===\"\"){\r\n        alert(\"Please enter your Credentials\")\r\n      }else if(username===\"Ashish\" && password===\"\"){\r\n        alert(\"Please enter password\")\r\n      }else{\r\n        alert(\"Wrong Credentials\")\r\n      }\r\n    }\r\n    \r\n\r\n\r\n\r\n   render()  {\r\n             \r\n             if(this.state.loggedIn){\r\n             \treturn <Redirect to=\"/admin\"/>\r\n             }\r\n\r\n         return(\r\n\r\n\r\n        <Content>\r\n        <Heading>Welcome to Login Page</Heading>\r\n        <form onSubmit = {this.submitForm}>\r\n             \r\n             <input type=\"text\" placeholder=\"username\" name=\"username\" value= {this.state.username} onChange= {this.onChange}/>\r\n             <br/>\r\n             <input type=\"password\" placeholder=\"password\" name=\"password\" value= {this.state.password} onChange= {this.onChange}/>\r\n             <br/>\r\n             <Button>Submit</Button>\r\n             \r\n        </form>\r\n\r\n        </Content>\r\n\r\n\r\n\r\n       \t)\r\n\r\n\r\n\r\n   }\r\n\r\n\r\n\r\n}","import React, { Component } from 'react'\r\nimport { Link,Redirect } from 'react-router-dom'\r\nimport styled from \"styled-components\";\r\n\r\n\r\nconst Content = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n`;\r\n\r\nconst Heading = styled.p`\r\n  color: red;\r\n`;\r\n\r\n\r\n\r\nconst Button = styled.button`\r\n  margin: 10px;\r\n  color: red;\r\n`;\r\n\r\nexport default class Logout extends Component{\r\n   constructor(props){\r\n     super(props)\r\n     localStorage.removeItem(\"token\")\r\n\r\n}\r\n\r\n   render(){\r\n\r\n      return(\r\n        \r\n        <Content>\r\n        <Heading> You have been logged out!!! </Heading>\r\n        <Button>\r\n        <Link to=\"/\">Login Again</Link>\r\n        </Button>\r\n        </Content>\r\n\r\n      \t)\r\n\r\n   }\r\n\r\n\r\n\r\n}","import React, {Component} from 'react';\r\nimport { Link, Redirect } from 'react-router-dom'\r\nimport styled from \"styled-components\";\r\nimport iitg from '../iitg1.jpg';\r\nimport messi from '../lionel-messi.jpg';\r\nimport cr7 from '../ronaldo.jpeg';\r\n\r\n\r\n\r\nconst Content = styled.div`\r\n  \r\n\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  \r\n\r\n@media(max-width:400px){\r\n\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  }    \r\n  \r\n  @media(max-width:760px){\r\n\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  }    \r\n  \r\n  @media(max-width:1080px){\r\n\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  }    \r\n  \r\n\r\n`;\r\n\r\nconst Wrapper = styled.div`\r\n  flex-direction: row;\r\n\r\n@media(max-width:400px){\r\n flex-direction: row;\r\n}\r\n  @media(max-width:760px){\r\n flex-direction: row;\r\n}\r\n@media(max-width:1080px){\r\n flex-direction: row;\r\n}\r\n`;\r\n\r\nconst Heading = styled.p`\r\ncolor: red;\r\nmargin-left: 50px;\r\n\r\n@media(max-width:400px){\r\n   color:red;\r\n   margin-left:50px;\r\n}\r\n@media(max-width:760px){\r\n color:red;\r\n   margin-left:50px;\r\n}\r\n\r\n@media(max-width:1080px){\r\n color:red;\r\n   margin-left:50px;\r\n}\r\n\r\n\r\n  \r\n`;\r\n\r\nconst Image = styled.img`\r\n  \r\nheight: 20%;\r\nwidth: 20%;\r\nmargin: 10px;\r\n\r\n@media(max-width:400px){\r\n  width: 90%;\r\n  height: 10%;\r\n  class: center;\r\n}\r\n\r\n@media(max-width:768px){\r\n  width: 90%;\r\n  height: 50%;\r\n  class: center;\r\n}\r\n\r\n\r\n@media(max-width:1080px){\r\n  width: 90%;\r\n  height: 50%;\r\n  class: center;\r\n}\r\n    \r\n\r\n`;\r\n\r\nconst Button = styled.button`\r\n  margin: 12px;\r\n  text-align: center;\r\n \r\n`;\r\n\r\n\r\n\r\nexport default class Admin extends Component{\r\n   constructor(props){\r\n     super(props)\r\n     const token = localStorage.getItem(\"token\")\r\n\r\n     let loggedIn = true\r\n     if(token==null){\r\n     \tloggedIn = false\r\n     }\r\n      this.state=\r\n      {\r\n      \tloggedIn\r\n      }\r\n\r\n   }\r\n\r\n\r\n   render(){\r\n       \r\n       if(this.state.loggedIn===false)\r\n       {\r\n       \treturn <Redirect to=\"/\" />\r\n       }\r\n     return(\r\n\r\n         <Content>\r\n         <Wrapper>\r\n           <Heading>You are now logged in!!</Heading>\r\n           <Button>\r\n           <div>\r\n           <Link to=\"/logout\">Logout</Link>\r\n           </div>\r\n           </Button>\r\n         </Wrapper>\r\n\r\n           <Image src={iitg}  />\r\n           <Image src={messi}   />\r\n           <Image src={cr7}    />\r\n           \r\n           \r\n          </Content>\r\n\r\n\r\n     \t)\r\n\r\n   }\r\n}","import React, {Component} from 'react';\nimport { Link, Switch, Route } from 'react-router-dom'\nimport Login from './Components/login'\nimport Logout from './Components/logout'\nimport Admin from './Components/admin'\n\n\nclass App extends Component {\n\n  render(){\n  return (\n\n\n   <Switch>\n      <Route exact path=\"/\" component={Login}/>\n      <Route path=\"/admin\" component={Admin}/>\n      <Route path=\"/logout\" component={Logout}/>\n\n    </Switch>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { HashRouter } from 'react-router-dom';\n\n\n\n\n\n\nReactDOM.render(\n<HashRouter>\n  \n    <App />\n</HashRouter>,  \n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}